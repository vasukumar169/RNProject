{
  "_args": [
    [
      {
        "raw": "react-devtools",
        "scope": null,
        "escapedName": "react-devtools",
        "name": "react-devtools",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\new\\HME_MobileApp"
    ]
  ],
  "_from": "react-devtools@latest",
  "_id": "react-devtools@3.0.0",
  "_inCache": true,
  "_location": "/react-devtools",
  "_nodeVersion": "8.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-devtools-3.0.0.tgz_1510250899795_0.8962510011624545"
  },
  "_npmUser": {
    "name": "gaearon",
    "email": "dan.abramov@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {
    "shell-quote": "1.6.1",
    "ultron": "1.1.1"
  },
  "_requested": {
    "raw": "react-devtools",
    "scope": null,
    "escapedName": "react-devtools",
    "name": "react-devtools",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/react-devtools/-/react-devtools-3.0.0.tgz",
  "_shasum": "8459804a456f7caeca8d3d2a6f20c853574555cd",
  "_shrinkwrap": null,
  "_spec": "react-devtools",
  "_where": "D:\\new\\HME_MobileApp",
  "author": {
    "name": "Jared Forsyth"
  },
  "bin": {
    "react-devtools": "./bin.js"
  },
  "bugs": {
    "url": "https://github.com/facebook/react-devtools/issues"
  },
  "dependencies": {
    "cross-spawn": "^5.0.1",
    "electron": "^1.4.15",
    "ip": "^1.1.4",
    "minimist": "^1.2.0",
    "react-devtools-core": "^3.0.0",
    "update-notifier": "^2.1.0"
  },
  "description": "Use react-devtools outside of the browser",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-V8JrJNSyaAOzzIyA2voQsaGwwUcdzHZwiheZSuY/W5QA67W+zxpzMT0pQ90e9HFSNzDgsBN1byg/nMFYWwutmg==",
    "shasum": "8459804a456f7caeca8d3d2a6f20c853574555cd",
    "tarball": "https://registry.npmjs.org/react-devtools/-/react-devtools-3.0.0.tgz"
  },
  "files": [
    "bin.js",
    "app.html",
    "app.js",
    "index.js",
    "icons"
  ],
  "homepage": "https://github.com/facebook/react-devtools#readme",
  "license": "BSD-3-Clause",
  "maintainers": [
    {
      "name": "sophiebits",
      "email": "npm@sophiebits.com"
    },
    {
      "name": "brianvaughn",
      "email": "briandavidvaughn@gmail.com"
    },
    {
      "name": "acdlite",
      "email": "acdlite@me.com"
    },
    {
      "name": "sebmarkbage",
      "email": "sebastian@calyptus.eu"
    },
    {
      "name": "gaearon",
      "email": "dan.abramov@gmail.com"
    }
  ],
  "name": "react-devtools",
  "optionalDependencies": {},
  "readme": "# `react-devtools`\n\nIf you need to debug a React page somewhere other than Chrome on desktop (a mobile browser, an embedded webview, Safari, etc), the `react-devtools` package is for you! It is also useful if your app is inside an iframe.\n\nIt works both with React DOM and React Native.\n\n<img src=\"http://i.imgur.com/IXeHiZD.png\" width=\"600\" alt=\"Screenshot of React DevTools running with React Native\">\n\n## Usage with React Native\n\nInstall the `react-devtools` package globally:\n\n```\nnpm install -g react-devtools\n```\n\nNow run `react-devtools` from the terminal to launch the standalone DevTools app:\n\n```\nreact-devtools\n```\n\nIf you're using React Native 0.43 or higher, it should connect to your simulator within a few seconds.\n\n> Note: if you prefer to avoid global installations, you can add `react-devtools` as a project dependency. With Yarn, you can run `yarn add --dev react-devtools`, and then run `yarn react-devtools` from your project folder to open the DevTools. With npm, you can run `npm install --save-dev react-devtools`, add `\"react-devtools\": \"react-devtools\"` to the `scripts` section in your `package.json`, and then run `npm run react-devtools` from your project folder to open the DevTools.\n\n### Integration with React Native Inspector\n\nYou can open the [in-app developer menu](https://facebook.github.io/react-native/docs/debugging.html#accessing-the-in-app-developer-menu) and choose \"Show Inspector\". It will bring up an overlay that lets you tap on any UI element and see information about it:\n\n![React Native Inspector](http://i.imgur.com/ReFhREb.gif)\n\nHowever, when `react-devtools` is running, Inspector will enter a special collapsed mode, and instead use the DevTools as primary UI. In this mode, clicking on something in the simulator will bring up the relevant components in the DevTools:\n\n![React DevTools Inspector Integration](http://i.imgur.com/wVgV9RP.gif)\n\nYou can choose \"Hide Inspector\" in the same menu to exit this mode.\n\n### Inspecting Component Instances\n\nWhen debugging JavaScript in Chrome, you can inspect the props and state of the React components in the browser console.\n\nFirst, follow the [instructions for debugging in Chrome](https://facebook.github.io/react-native/docs/debugging.html#chrome-developer-tools) to open the Chrome console.\n\nMake sure that the dropdown in the top left corner of the Chrome console says `debuggerWorker.js`. **This step is essential.**\n\nThen select a React component in React DevTools. There is a search box at the top that helps you find one by name. As soon as you select it, it will be available as `$r` in the Chrome console, letting you inspect its props, state, and instance properties.\n\n![React DevTools Chrome Console Integration](http://i.imgur.com/Cpvhs8i.gif)\n\n\n## Usage with React DOM\n\nThe standalone shell can also be useful with React DOM (for example, to debug apps in Safari, or inside an iframe).\n\nInstall the `react-devtools` package globally:\n\n```\nnpm install -g react-devtools\n```\n\nNow run `react-devtools` from the terminal to launch the standalone DevTools app:\n\n```\nreact-devtools\n```\n\nFinally, add `<script src=\"http://localhost:8097\"></script>` as the very first `<script>` tag in the `<head>` of your page when developing:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script src=\"http://localhost:8097\"></script>\n```\n\nThis will ensure the developer tools are connected.  \n**Don’t forget to remove it before deploying to production!**\n\n>Note: if you prefer to avoid global installations, you can add `react-devtools` as a project dependency. With Yarn, you can run `yarn add --dev react-devtools`, and then run `yarn react-devtools` from your project folder to open the DevTools. With npm, you can run `npm install --save-dev react-devtools`, add `\"react-devtools\": \"react-devtools\"` to the `scripts` section in your `package.json`, and then run `npm run react-devtools` from your project folder to open the DevTools. \n\n>If you install `react-devtools` as a project dependency, you may also replace the `<script>` suggested above with a JavaScript import (`import 'react-devtools'`). It is important that this import comes before any other imports in your app (especially before `react-dom`). Make sure to remove the import before deploying to production, as it carries a large DevTools client with it. If you use Webpack and have control over its configuration, you could alternatively add `'react-devtools'` as the first item in the `entry` array of the development-only configuration, and then you wouldn’t need to deal either with `<script>` tags or `import` statements.\n\n## Advanced\n\nBy default DevTools listen to port `8097` on `localhost`.  \nIf you need to customize host, port, or other settings, see the `react-devtools-core` package instead.\n\n## Developing\n\n* Run `npm run backend:watch` and `npm run standalone:watch` in `../react-devtools-core`\n* Run `npm start` in this folder\n* Refresh the app after it has recompiled on change\n* For React Native, copy `react-devtools-core` to its `node_modules` to test your changes\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git+https://github.com/facebook/react-devtools.git",
    "type": "git"
  },
  "scripts": {
    "start": "node bin.js"
  },
  "version": "3.0.0"
}

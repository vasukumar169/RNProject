{
  "_args": [
    [
      {
        "raw": "react-native-drawer@git+https://github.com/GeekyAnts/react-native-drawer.git",
        "scope": null,
        "escapedName": "react-native-drawer",
        "name": "react-native-drawer",
        "rawSpec": "git+https://github.com/GeekyAnts/react-native-drawer.git",
        "spec": "git+https://github.com/GeekyAnts/react-native-drawer.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:GeekyAnts/react-native-drawer.git",
          "sshUrl": "git+ssh://git@github.com/GeekyAnts/react-native-drawer.git",
          "httpsUrl": "git+https://github.com/GeekyAnts/react-native-drawer.git",
          "gitUrl": "git://github.com/GeekyAnts/react-native-drawer.git",
          "shortcut": "github:GeekyAnts/react-native-drawer",
          "directUrl": "https://raw.githubusercontent.com/GeekyAnts/react-native-drawer/master/package.json"
        }
      },
      "D:\\new\\HME_MobileApp\\node_modules\\native-base"
    ]
  ],
  "_from": "git+https://github.com/GeekyAnts/react-native-drawer.git",
  "_id": "react-native-drawer@2.3.0",
  "_inCache": true,
  "_location": "/react-native-drawer",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-drawer@git+https://github.com/GeekyAnts/react-native-drawer.git",
    "scope": null,
    "escapedName": "react-native-drawer",
    "name": "react-native-drawer",
    "rawSpec": "git+https://github.com/GeekyAnts/react-native-drawer.git",
    "spec": "git+https://github.com/GeekyAnts/react-native-drawer.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:GeekyAnts/react-native-drawer.git",
      "sshUrl": "git+ssh://git@github.com/GeekyAnts/react-native-drawer.git",
      "httpsUrl": "git+https://github.com/GeekyAnts/react-native-drawer.git",
      "gitUrl": "git://github.com/GeekyAnts/react-native-drawer.git",
      "shortcut": "github:GeekyAnts/react-native-drawer",
      "directUrl": "https://raw.githubusercontent.com/GeekyAnts/react-native-drawer/master/package.json"
    }
  },
  "_requiredBy": [
    "/native-base"
  ],
  "_resolved": "git+https://github.com/GeekyAnts/react-native-drawer.git#8d9078516d177c9cb02d2579a6860706d2370d25",
  "_shasum": "daa1a38bb350f8f8fa31b8ee44b904253198be6e",
  "_shrinkwrap": null,
  "_spec": "react-native-drawer@git+https://github.com/GeekyAnts/react-native-drawer.git",
  "_where": "D:\\new\\HME_MobileApp\\node_modules\\native-base",
  "author": {
    "name": "rt2zz",
    "email": "zack@root-two.com"
  },
  "bugs": {
    "url": "https://github.com/rt2zz/react-native-drawer/issues"
  },
  "dependencies": {
    "prop-types": "^15.5.8",
    "tween-functions": "^1.0.1"
  },
  "description": "React Native Drawer",
  "devDependencies": {
    "babel-eslint": "^4.1.8",
    "eslint": "^1.10.3",
    "eslint-config-rackt": "^1.1.1",
    "eslint-config-standard-react": "^1.2.1",
    "eslint-plugin-react": "^3.14.0",
    "eslint-plugin-standard": "^1.3.1"
  },
  "gitHead": "8d9078516d177c9cb02d2579a6860706d2370d25",
  "homepage": "https://github.com/rt2zz/react-native-drawer",
  "keywords": [
    "react",
    "react-native",
    "react-component",
    "drawer",
    "side-menu",
    "menu",
    "ios",
    "android",
    "material design"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "react-native-drawer",
  "optionalDependencies": {},
  "readme": "React Native Drawer is in need of maintainers. Specifically it requires updating to use Animated lib. There is however an excellent, albeit less configurable option in [React Native Side Menu](https://github.com/react-native-community/react-native-side-menu) which we highly recommend. If you are interested in revamping React Native Drawer please get in touch!\r\n\r\n## React Native Drawer\r\n<img width=\"220px\" align=\"right\" src=\"https://raw.githubusercontent.com/rt2zz/react-native-drawer/master/examples/rn-drawer.gif\" />\r\n\r\nReact native drawer, configurable to achieve material design style, slack style, parallax, and more. Works in both iOS and Android.\r\n\r\n[![npm version](https://img.shields.io/npm/v/react-native-drawer.svg?style=flat-square)](https://www.npmjs.com/package/react-native-drawer)\r\n[![npm downloads](https://img.shields.io/npm/dm/react-native-drawer.svg?style=flat-square)](https://www.npmjs.com/package/react-native-drawer)\r\n\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n- [Examples](#examples)\r\n- [Props](#props)\r\n- [Demo](#demo)\r\n- [Credits](#credits)\r\n\r\n### Installation\r\n`npm install --save react-native-drawer`\r\n\r\n### Usage\r\n```javascript\r\nimport Drawer from 'react-native-drawer'\r\n\r\nclass Application extends Component {  \r\n  closeControlPanel = () => {\r\n    this._drawer.close()\r\n  };\r\n  openControlPanel = () => {\r\n    this._drawer.open()\r\n  };\r\n  render () {\r\n    return (\r\n      <Drawer\r\n        ref={(ref) => this._drawer = ref}\r\n        content={<ControlPanel />}\r\n        >\r\n        <MainView />\r\n      </Drawer>\r\n    )\r\n  }\r\n})\r\n```\r\n\r\n### Examples\r\n```js\r\n//Parallax Effect (slack style)\r\n<Drawer\r\n  type=\"static\"\r\n  content={<ControlPanel />}\r\n  openDrawerOffset={100}\r\n  styles={drawerStyles}\r\n  tweenHandler={Drawer.tweenPresets.parallax}\r\n  >\r\n    <Main />\r\n</Drawer>\r\n\r\n//Material Design Style Drawer\r\n<Drawer\r\n  type=\"overlay\"\r\n  content={<ControlPanel />}\r\n  tapToClose={true}\r\n  openDrawerOffset={0.2} // 20% gap on the right side of drawer\r\n  panCloseMask={0.2}\r\n  closedDrawerOffset={-3}\r\n  styles={drawerStyles}\r\n  tweenHandler={(ratio) => ({\r\n    main: { opacity:(2-ratio)/2 }\r\n  })}\r\n  >\r\n    <Main />\r\n</Drawer>\r\n\r\nconst drawerStyles = {\r\n  drawer: { shadowColor: '#000000', shadowOpacity: 0.8, shadowRadius: 3},\r\n  main: {paddingLeft: 3},\r\n}\r\n```\r\n\r\n### Props\r\nThis module supports a wide range of drawer styles, and hence has *a lot* of props.\r\n##### Important\r\n- `content` (React.Component) `null` - Menu component\r\n- `type` (String: displace:overlay:static) `displace`- Type of drawer.\r\n- `open` (Boolean) `null` - If true will trigger drawer open, if false will trigger close.\r\n- `openDrawerOffset` (Number|Function) `0` - Can either be a integer (pixel value) or decimal (ratio of screen width). Defines the right hand margin when the drawer is open. Or, can be function which returns offset: `(viewport) => viewport.width - 200`\r\n- `closedDrawerOffset` (Number|Function) `0` - Same as openDrawerOffset, except defines left hand margin when drawer is closed.\r\n- `disabled` (Boolean) `false` - If true the drawer can not be opened and will not respond to pans.\r\n- `styles` (Object) `null` - Styles for the drawer, main, drawerOverlay and mainOverlay container Views.\r\n\r\n##### Animation / Tween\r\n**Note**: In the future animations with use Animated, and the api will change.\r\n- `tweenHandler` (Function) `null` - Takes in the pan ratio (decimal 0 to 1) that represents the tween percent. Returns an object of native props to be set on the constituent views { drawer: {/*native props*/}, main: {/*native props*/}, mainOverlay: {/*native props*/} }\r\n- `tweenDuration` (Integer) `250` - The duration of the open/close animation.\r\n- `tweenEasing` (String) `linear` - A easing type supported by [tween-functions](https://www.npmjs.com/package/tween-functions)\r\n\r\n##### Event Handlers\r\n- `onOpen` (Function) - Will be called immediately after the drawer has entered the open state.\r\n- `onOpenStart` (Function) callback fired at the start of an open animation.\r\n- `onClose` (Function) - Will be called immediately after the drawer has entered the closed state.\r\n- `onCloseStart` (Function) callback fired at the start of a close animation.\r\n\r\n##### Gestures\r\n- `captureGestures` (oneOf(true, false, 'open', 'closed')) `open` - If true, will capture all gestures inside of the pan mask. If 'open' will only capture when drawer is open.\r\n- `acceptDoubleTap` (Boolean) `false` - Toggle drawer when double tap occurs within pan mask?\r\n- `acceptTap` (Boolean) `false` - Toggle drawer when any tap occurs within pan mask?\r\n- `acceptPan` (Boolean) `true` - Allow for drawer pan (on touch drag). Set to false to effectively disable the drawer while still allowing programmatic control.\r\n- `tapToClose` (Boolean) `false` - Same as acceptTap, except only for close.\r\n- `negotiatePan` (Boolean) `false` - If true, attempts to handle only horizontal swipes, making it play well with a child `ScrollView`.\r\n\r\n##### Additional Configurations\r\n- `panThreshold` (Number) `.25` - Ratio of screen width that must be travelled to trigger a drawer open/close.\r\n- `panOpenMask` (Number) `null` - Ratio of screen width that is valid for the start of a pan open action. If null -> defaults to `max(.05, closedDrawerOffset)`.\r\n- `panCloseMask` (Number) `null` - Ratio of screen width that is valid for the start of a pan close action. If null -> defaults to `max(.05, openDrawerOffset)`.\r\n- `initializeOpen` (Boolean) `false` - Initialize with drawer open?\r\n- `side` (String left|right|top|bottom) `left` - which side the drawer should be on.\r\n- `useInteractionManager` (Boolean) `false` - if true will run InteractionManager for open/close animations.\r\n- `elevation` (Number) `0` - (Android-only) Sets the elevation of the drawer using Android's underlying [elevation API](https://developer.android.com/training/material/shadows-clipping.html#Elevation)\r\n\r\n### Tween Handler\r\nYou can achieve pretty much any animation you want using the tween handler with the transformMatrix property. E.G.\r\n```js\r\ntweenHandler={(ratio) => {\r\n  var r0 = -ratio/6\r\n  var r1 = 1-ratio/6\r\n  var t = [\r\n             r1,  r0,  0,  0,\r\n             -r0, r1,  0,  0,\r\n             0,   0,   1,  0,\r\n             0,   0,   0,  1,\r\n          ]\r\n  return {\r\n    main: {\r\n      style: {\r\n        transformMatrix: t,\r\n        opacity: 1 - ratio/2,\r\n      },\r\n    }\r\n  }\r\n}}\r\n```\r\nWill result in a skewed fade out animation.\r\n\r\n### Opening & Closing the Drawer Programmatically\r\nThree options:\r\n\r\n1. Use the open prop (controlled mode):  \r\n\r\n    ```js\r\n    <Drawer\r\n      open={true}\r\n    ```\r\n\r\n2. Using the Drawer Ref:\r\n\r\n    ```js\r\n    // assuming ref is set up on the drawer as (ref) => this._drawer = ref\r\n    onPress={() => {this._drawer.open()}}\r\n    ```\r\n\r\n3. Using Context\r\n\r\n    ```js\r\n    contextTypes = {drawer: React.PropTypes.object}\r\n    // later...\r\n    this.context.drawer.open()\r\n    ```\r\n\r\n### Demo\r\n* `git clone https://github.com/rt2zz/react-native-drawer.git`\r\n* `cd react-native-drawer/examples/RNDrawerDemo && npm install`\r\n* **iOS**\r\n\t* Open `./examples/RNDrawerDemo/RNDrawerDemo.xcodeproject` in xcode\r\n\t* `command+r` (in xcode)\r\n* **Android**\r\n\t* Run android simulator / plug in your android device\r\n\t* Run `react-native run-android` in terminal\r\n\r\n### Credits\r\nComponent was adapted from and inspired by\r\n[@khanghoang](https://github.com/khanghoang)'s [RNSideMenu](https://github.com/khanghoang/RNSideMenu)\r\n*AND*\r\n[@kureevalexey](https://twitter.com/kureevalexey)'s [react-native-side-menu](https://github.com/Kureev/react-native-side-menu)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/rt2zz/react-native-drawer.git"
  },
  "scripts": {},
  "version": "2.3.0"
}

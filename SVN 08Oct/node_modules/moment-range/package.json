{
  "_args": [
    [
      {
        "raw": "moment-range",
        "scope": null,
        "escapedName": "moment-range",
        "name": "moment-range",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\new\\SVN\\trunk"
    ]
  ],
  "_from": "moment-range@latest",
  "_id": "moment-range@4.0.1",
  "_inCache": true,
  "_location": "/moment-range",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/moment-range_4.0.1_1525215622955_0.7380785054853631"
  },
  "_npmUser": {
    "name": "tristanjm",
    "email": "tristanjm96@gmail.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "moment-range",
    "scope": null,
    "escapedName": "moment-range",
    "name": "moment-range",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/moment-range/-/moment-range-4.0.1.tgz",
  "_shasum": "1ae8cf209dded0a5ce5e16603146265b3906a86f",
  "_shrinkwrap": null,
  "_spec": "moment-range",
  "_where": "D:\\new\\SVN\\trunk",
  "author": {
    "name": "Gianni Chiappetta",
    "email": "gianni@runlevel6.org",
    "url": "https://butt.zone"
  },
  "bugs": {
    "url": "https://github.com/rotaready/moment-range/issues"
  },
  "contributors": [
    {
      "name": "Adam Biggs",
      "url": "lightmaker.com"
    },
    {
      "name": "Mats Julian Olsen",
      "url": "https://github.com/mewwts"
    },
    {
      "name": "Matt Patterson",
      "email": "matt@reprocessed.org",
      "url": "http://reprocessed.org/"
    },
    {
      "name": "Wilgert Velinga",
      "email": "wilgert@wilgert.nl",
      "url": "http://neocles.io"
    },
    {
      "name": "Tomasz Bak",
      "url": "http://twitter.com/tomaszbak"
    },
    {
      "name": "Stuart Kelly",
      "url": "https://github.com/stuartleigh"
    },
    {
      "name": "Jeremy Forsythe",
      "email": "jdforsythe@gmail.com",
      "url": "https://github.com/jdforsythe"
    },
    {
      "name": "Александр Гренишин",
      "email": "nd0ut.me@gmail.com",
      "url": "https://github.com/nd0ut"
    },
    {
      "name": "@scotthovestadt",
      "url": "https://github.com/scotthovestadt"
    },
    {
      "name": "Thomas van Lankveld",
      "url": "https://github.com/thomasvanlankveld"
    },
    {
      "name": "nebel",
      "email": "nebel@outlook.com",
      "url": "https://github.com/pronebel"
    },
    {
      "name": "Kevin Ross",
      "email": "kevin.ross@alienfast.com",
      "url": "http://www.alienfast.com"
    },
    {
      "name": "Thomas Walpole",
      "email": "twalpole@gmail.com",
      "url": "https://github.com/twalpole"
    },
    {
      "name": "Jonathan Kim",
      "email": "hello@jkimbo.co.uk",
      "url": "jkimbo.co.uk"
    },
    {
      "name": "Tymon Tobolski",
      "email": "i@teamon.eu",
      "url": "http://teamon.eu"
    },
    {
      "name": "Aristide Niyungeko",
      "email": "aristide.niyungeko@gmail.com",
      "url": "https://github.com/aristiden7o"
    },
    {
      "name": "Bradley Ayers",
      "email": "bradley.ayers@gmail.com",
      "url": "https://github.com/bradleyayers"
    },
    {
      "name": "Ross Hadden",
      "email": "ross@hadden.family",
      "url": "http://rosshadden.github.com/resume"
    },
    {
      "name": "Victoria French",
      "email": "victoria.french@cinecove.com",
      "url": "https://github.com/victoriafrench"
    },
    {
      "name": "Jochen Diekenbrock",
      "url": "https://github.com/JochenDiekenbrock"
    }
  ],
  "dependencies": {
    "es6-symbol": "^3.1.0"
  },
  "description": "Fancy date ranges for Moment.js",
  "devDependencies": {
    "babel-core": "^6.18.2",
    "babel-eslint": "^7.1.1",
    "babel-loader": "^6.2.8",
    "babel-plugin-transform-flow-strip-types": "^6.18.0",
    "babel-polyfill": "^6.16.0",
    "babel-preset-es2015": "^6.18.0",
    "babel-preset-stage-0": "^6.16.0",
    "doctoc": "^1.2.0",
    "eslint": "^3.11.1",
    "eslint-loader": "^1.6.1",
    "expect.js": "^0.3.1",
    "flow-bin": "0.66.0",
    "karma": "^1.3.0",
    "karma-babel-polyfill": "0.0.5",
    "karma-chrome-launcher": "^2.0.0",
    "karma-expect": "^1.1.3",
    "karma-mocha": "^1.3.0",
    "karma-phantomjs-launcher": "^1.0.2",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^2.0.2",
    "mocha": "^2.5.3",
    "moment": "^2.17.1",
    "typescript": "^2.6.2",
    "webpack": "^2.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "1ae8cf209dded0a5ce5e16603146265b3906a86f",
    "tarball": "https://registry.npmjs.org/moment-range/-/moment-range-4.0.1.tgz",
    "fileCount": 9,
    "unpackedSize": 129369,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa6PGJCRA9TVsSAnZWagAAfmQP/A4LkgjX+wMmVlChmVWX\nEppoaHnT8R95YSzGoxGvSIADEh65nNmuXjGcVxQY7tMeM2onVu9vcl50kGPl\nh14Gu3Vt/BadBaNYjsG4PZ/b/kVZrC8k0gzQ1LGKhVuMMUptBanHwOwAEGB9\ndMpJ0Hu8b77ycB1sNGuY6lrTkDuCimgN0HWIOrjEVqmcudk6ilZZl4XBWp+Q\nSuvJHdK1nwe3QgtWsMXUrsS1Rt9mWCxqjc1QlnGdu+HSyinTI5BS4UX62gvt\nsqXlrGo2LZtNeNyXnNsJ2zcOafA9VygCpztKEHvXsDRmIHExONkEVoXZtbOb\nDsdFYEOF5VAyoHzI6ioH9QGsoEbOwYlh4v1WSR1su0c7o/gR20P3qvVDEJkn\na0EAV+bV9qdYyDLKmrYzDwy601fJv2cNeZFjR+QwEtXjWsEHEWqP4NTFT00e\nNoTRSq62BYeleLMei1eZ9YvSfT4WuEeDYJVaw4GrGDB+cAXeP/1Ued4iquPy\nEoNaB7wCfF1iP7euommxaHisHXDgmABzU72EwxLjs/plJH4n9O6Nh8JFAlMq\nVlOLu7+3fCiwaR77I60opl7o6VQiDKjE58GCS4byAI0Pc7rtE9fvJ8xlwa7N\nbtr4poupCDPdvKusnQRywBNdRYuJggvcVsLovdkHBOvIFVAQX+dm/diD+IIM\nt7rV\r\n=CBUz\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": "*"
  },
  "files": [
    "dist/"
  ],
  "homepage": "https://github.com/rotaready/moment-range",
  "license": "Unlicense",
  "licenseText": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n\n",
  "main": "./dist/moment-range",
  "maintainers": [
    {
      "name": "adambiggs",
      "email": "email@adambig.gs"
    },
    {
      "name": "carlholloway",
      "email": "c.holloway@rotaready.com"
    },
    {
      "name": "gf3",
      "email": "gianni@runlevel6.org"
    },
    {
      "name": "rhysjc",
      "email": "rhysjc@gmail.com"
    },
    {
      "name": "tristanjm",
      "email": "tristanjm96@gmail.com"
    }
  ],
  "name": "moment-range",
  "optionalDependencies": {},
  "peerDependencies": {
    "moment": ">= 2"
  },
  "readme": "# moment-range [![CircleCI](https://circleci.com/gh/rotaready/moment-range.svg?style=shield)](https://circleci.com/gh/rotaready/moment-range)\n\nFancy date ranges for [Moment.js][moment].\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installation](#installation)\n  - [Node / NPM](#node--npm)\n  - [Browser](#browser)\n  - [Older browsers and IE11](#older-browsers-and-ie11)\n- [Examples](#examples)\n  - [Create](#create)\n    - [rangeFromInterval](#rangefrominterval)\n    - [parseZoneRange](#parsezonerange)\n    - [rangeFromISOString](#rangefromisostring)\n  - [Attributes](#attributes)\n  - [Querying](#querying)\n    - [Adjacent](#adjacent)\n    - [Center](#center)\n    - [Contains](#contains)\n    - [Within](#within)\n    - [Overlaps](#overlaps)\n    - [Intersect](#intersect)\n    - [IsRange](#isrange)\n  - [Manipulation](#manipulation)\n    - [Add](#add)\n    - [Clone](#clone)\n    - [SnapTo](#snapto)\n    - [Subtract](#subtract)\n  - [Iteration](#iteration)\n    - [by](#by)\n    - [byRange](#byrange)\n    - [reverseBy](#reverseby)\n    - [reverseByRange](#reversebyrange)\n  - [Compare](#compare)\n    - [Equality](#equality)\n    - [Difference](#difference)\n  - [Conversion](#conversion)\n    - [`toDate`](#todate)\n    - [`toString`](#tostring)\n    - [`valueOf`](#valueof)\n- [Running Tests](#running-tests)\n- [Contributors](#contributors)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n## Installation\n\nmoment-range works in both the browser and [node.js][node].\n\n### Node / NPM\n\nInstall via npm:\n\n``` sh\nnpm install --save moment-range\n```\n\n**ES6:**\n\n``` js\nimport Moment from 'moment';\nimport { extendMoment } from 'moment-range';\n\nconst moment = extendMoment(Moment);\n```\n\n**CommonJS:**\n\n``` js\nconst Moment = require('moment');\nconst MomentRange = require('moment-range');\n\nconst moment = MomentRange.extendMoment(Moment);\n```\n\n### Browser\n\n``` html\n<script src=\"moment.js\"></script>\n<script src=\"moment-range.js\"></script>\n```\n\n``` js\nwindow['moment-range'].extendMoment(moment);\n```\n\nThanks to the fine people at [cdnjs][cdnjs], you can link to moment-range from\nthe [cdnjs servers][cdnjs-moment-range].\n\n\n### Older browsers and IE11\n\nThis library makes use of `Symbol.iterator` to provide the [iteration\nprotocols] now that there is [broad support] for them, if you need to support\nolder browsers (specifically IE11) you will need to include a polyfill. Any of\nthe following should work, depending on your project configuration:\n\n* [babel runtime transform plugin]\n* [babel polyfill]\n* https://github.com/medikoo/es6-iterator\n* https://github.com/zloirock/core-js\n\n\n## Examples\n\n### Create\n\nCreate a date range:\n\n``` js\nconst start = new Date(2012, 0, 15);\nconst end   = new Date(2012, 4, 23);\nconst range = moment.range(start, end);\n```\n\nYou can also create a date range with moment objects:\n\n``` js\nconst start = moment('2011-04-15', 'YYYY-MM-DD');\nconst end   = moment('2011-11-27', 'YYYY-MM-DD');\nconst range = moment.range(start, end);\n```\n\nArrays work too:\n\n``` js\nconst dates = [moment('2011-04-15', 'YYYY-MM-DD'), moment('2011-11-27', 'YYYY-MM-DD')];\nconst range = moment.range(dates);\n```\n\nYou can also create a range from an [ISO 8601 time interval][interval] string:\n\n``` js\nconst timeInterval = '2015-01-17T09:50:04+00:00/2015-04-17T08:29:55+00:00';\nconst range = moment.range(timeInterval);\n```\n\nYou can also create a range from the start until the end of a named interval:\n\n``` js\nconst date = moment('2011-04-15', 'YYYY-MM-DD');\nconst range = date.range('month');\n```\n\nYou can also create open-ended ranges which go to the earliest or latest possible date:\n\n``` js\nconst rangeUntil = moment.range(null, '2011-05-05');\nconst rangeFrom = moment.range('2011-03-05');\nconst rangeAllTime = moment.range();\n```\nNote that any falsy value except 0 is treated as a missing date, resulting in an open-ended range.\n\n*Note:* Dates and moment objects both use a timestamp of 00:00:000 if none is\nprovided. To ensure your range includes any timestamp for the given end date,\nuse `.setHours(23,59,59,999)` when constructing a Date object, or\n`.endOf('day')` when constructing a moment object.\n\n#### rangeFromInterval\n\nYou can also create a range between an interval and a specified date. This accepts positive or negative values\nfor `count` and the date will default to _now_ if not provided.\n\n``` js\nconst interval = 'month';\nconst count = 4;\nconst date = moment('2017-07-20');\n\nconst range1 = moment.rangeFromInterval(interval, count, date);  // moment.range('2017-07-20', '2017-11-20')\nconst range2 = moment.rangeFromInterval('month', -2, date);      // moment.range('2017-05-20', '2017-07-20')\n```\n\nNote: The date can be provided as a Date, String, or Moment.\nWhen using a negative interval, the date provided will be set as the end of the range.\n\n#### parseZoneRange\n\n**DEPRECATED** in `4.0.0`: Replaced by `rangeFromISOString` to follow naming conventions.\n\n#### rangeFromISOString\n\nConverts an [ISO 8601 time interval string][interval] into a date range while\npreserving the time zones using [moment.parseZone][parseZone].\n\n``` js\nconst interval = '2015-01-17T09:50:00+03:00/2015-04-17T08:29:55-04:00';\nconst range = moment.rangeFromISOString(interval);\n\nrange.toString(); // '2015-01-17T09:50:00+03:00/2015-04-17T08:29:55-04:00'\n```\n\n### Attributes\n\nYou can access the start and end moments of the range easily enough:\n\n``` js\nconst start = new Date(2012, 0, 15);\nconst end   = new Date(2012, 4, 23);\nconst range = moment.range(start, end);\n\nrange.start  // moment\nrange.end  // moment\n```\n\n### Querying\n\nMany of the following examples make use of these moments:\n\n``` js\nconst a = moment('2016-03-10');\nconst b = moment('2016-03-15');\nconst c = moment('2016-03-29');\nconst d = moment('2016-04-01');\n```\n\n#### Adjacent\n\nCheck if two ranges are touching but not overlapping:\n\n``` js\n\nconst range1 = moment.range(a, b);\nconst range2 = moment.range(b, c);\nconst range3 = moment.range(c, d);\n\nrange1.adjacent(range2) // true\nrange1.adjacent(range3) // false\n```\n\n#### Center\n\nCalculate the center of a range:\n\n``` js\nconst start = new Date(2011, 2, 5);\nconst end   = new Date(2011, 3, 5);\nconst range = moment.range(start, end);\n\nrange.center(); // 1300622400000\n```\n\n#### Contains\n\nCheck to see if your range contains a date/moment. By default the start and end\ndates are included in the search. E.g.:\n\n``` js\nconst range = moment.range(a, c);\n\nrange.contains(a); // true\nrange.contains(b); // true\nrange.contains(c); // true\nrange.contains(d); // false\n```\n\nYou can also control whether the start or end dates should be excluded from the\nsearch with the `excludeStart` and `excludeEnd` options:\n\n``` js\nconst range = moment.range(a, c);\n\nrange.contains(a); // true\nrange.contains(a, { excludeStart: true }); // false\nrange.contains(c); // true\nrange.contains(c, { excludeEnd: true; }); // false\n```\n\n**DEPRECATED** in `4.0.0`: The `exclusive` options is used to indicate if the start/end of\nthe range should be excluded when testing for inclusion:\n\n**Note**: You can obtain the same functionality by setting `{ excludeStart:\ntrue, excludeEnd: true }`\n\n``` js\nrange.contains(c); // true\nrange.contains(c, { exclusive: false }); // true\nrange.contains(c, { exclusive: true }); // false\n```\n\n#### Within\n\nFind out if your moment falls within a date range:\n\n``` js\nconst range = moment.range(a, c);\n\nb.within(range); // true\n```\n\n#### Overlaps\n\nDoes it overlap another range?\n\n``` js\nconst range1 = moment.range(a, c);\nconst range2 = moment.range(b, d);\nrange1.overlaps(range2); // true\n```\n\nInclude adjacent ranges:\n\n``` js\nconst range1 = moment.range(a, b);\nconst range2 = moment.range(b, c);\n\nrange1.overlaps(range2)                      // false\nrange1.overlaps(range2, { adjacent: false }) // false\nrange1.overlaps(range2, { adjacent: true })  // true\n```\n\n#### Intersect\n\nWhat is the intersecting range?\n\n``` js\nconst range1 = moment.range(a, c);\nconst range2 = moment.range(b, d);\nrange1.intersect(range2); // moment.range(b, c)\n```\n\n#### IsRange\n\nIs it a Range?\n\n``` js\nmoment.isRange(range); // true\nmoment.isRange(IamNotRange); // false\n```\n\n### Manipulation\n\n#### Add\n\nAdd/combine/merge overlapping or adjacent ranges.\n\n``` js\nconst range1 = moment.range(a, c);\nconst range2 = moment.range(b, d);\nrange1.add(range2); // moment.range(a, d)\n\nconst range3 = moment.range(a, b);\nconst range4 = moment.range(c, d);\nrange3.add(range4); // null\n```\n\nInclude adjacent ranges:\n\n``` js\nconst range1 = moment.range(a, b);\nconst range2 = moment.range(b, c);\n\nrange1.add(range2); // null\nrange1.add(range2, { adjacent: false }); // null\nrange1.add(range2, { adjacent: true }); // moment.range(a, c)\n```\n\n#### Clone\n\nDeep clone a range\n\n``` js\nconst range1 = moment.range(a, d);\n\nconst range2 = range1.clone();\nrange2.start.add(2, 'days');\n\nrange1.start.toDate().getTime() === range2.start.toDate().getTime() // false\n```\n\n#### SnapTo\n\nSnap the start and end of a range to a given interval.\n\n``` js\nconst start = moment('2018-01-25 17:05:33');\nconst end = moment('2018-01-28 06:10:00');\n\nconst range1 = moment.range(start, end);\nconst range2 = range1.snapTo('day'); // 2018-01-25T00:00:00 -> 2018-01-28T23:59:59\n\nrange1.diff('days'); // 2\nrange2.diff('days'); // 3\n```\n\n#### Subtract\n\nSubtracting one range from another.\n\n``` js\nconst range_ab = moment.range(a, b);\nconst range_bc = moment.range(b, c);\nconst range_cd = moment.range(c, d);\nconst range_ad = moment.range(a, d);\nrange_ad.subtract(range_bc); // [moment.range(a, b) moment.range(c, d)]\nrange_ac.subtract(range_bc); // [moment.range(a, b)]\nrange_ab.subtract(range_cd); // [moment.range(a, b)]\nrange_bc.subtract(range_bd); // [null]\n```\n\n### Iteration\n\nEach of the iteration methods returns an [Iterable][iterable], providing\na convenient and performant interface to iterating over your ranges by a given\nperiod.\n\n#### by\n\nIterate over your range by a given period. Any of the units accepted by\n[moment.js' `add` method][add] may be used. E.g.: `'years' | 'quarters'\n| 'months' | 'weeks' | 'days' | 'hours' | 'minutes' | 'seconds'\n| 'milliseconds'`\n\n``` js\nconst range = moment.range('2010-01-01', '2015-01-01');\n\nfor (let month of range.by('month')) {\n  month.format('YYYY-MM-DD');\n}\n\nconst years = Array.from(range.by('year'));\nyears.length == 6 // true\nyears.map(m => m.format('YYYY')) // ['2010', '2011', '2012', '2013', '2014', '2015']\n```\n\nIteration also supports excluding the final time slice of the range by setting the\n`excludeEnd` option to `true`. In the example below, the 5:00 -> 6:00 time slice is omitted.\n\n``` js\nconst range = moment.range('2018-01-01 00:00', '2018-01-01 05:30');\n\nconst hours = Array.from(range.by('hour', { excludeEnd: true }));\nhours.length == 5 // true\nhours.map(m => m.format('HH:mm')) // ['00:00', '01:00', '02:00', '03:00', '04:00']\n```\n\nAdditionally it's possible to iterate by a given step that defaults to `1`:\n\n``` js\nconst start  = new Date(2012, 2, 2);\nconst end    = new Date(2012, 2, 6);\nconst range1 = moment.range(start, end);\n\nlet acc = Array.from(range1.by('day', { step: 2 }));\n\nacc.map(m => m.format('DD')) // ['02', '04', '06']\n\nacc = Array.from(range1.by('day', { excludeEnd: true, step: 2 }));\n\nacc.map(m => m.format('DD')) // ['02', '04']\n```\n\nYou can iterate over the span of a range for a period that is entered but not complete by using the [snapTo()](#snapto) method:\n\n``` js\nconst start = moment(\"2017-01-01T13:30:00\");\nconst end = moment(\"2017-01-05T01:45:12\");\nconst r1 = moment.range(start, end);\nconst r2 = r1.snapTo('day');\n\nArray.from(r1.by('days')).map(m => m.format('DD')); // ['01', '02', '03', '04']\nArray.from(r2.by('days')).map(m => m.format('DD')); // ['01', '02', '03', '04', '05']\n```\n\n**DEPRECATED** in `4.0.0`: The `exclusive` options is used to indicate if the\nend of the range should be excluded when testing for inclusion:\n\n**Note**: You can obtain the same functionality by setting `{ excludeEnd: true }`\n\n\n#### byRange\n\n``` js\nconst start = new Date(2012, 2, 1); // 1st\nconst two   = new Date(2012, 2, 2); // 2nd\nconst end   = new Date(2012, 2, 5); // 5th\nconst range1 = moment.range(start, end);\nconst range2 = moment.range(start, two); // One day\n```\n\nIterate by another range:\n\n``` js\nconst acc = Array.from(range1.byRange(range2));\n\nacc.length == 5 // true\nacc.map(m => m.format('DD')) // ['01','02','03','04','05']\n```\n\nExclude the end time slice:\n\n``` js\nconst acc = Array.from(range1.byRange(range2, { excludeEnd: true }));\n\nacc.length == 4 // true\nacc.map(m => m.format('DD')) // ['01','02','03','04']\n```\n\nBy step:\n\n``` js\nlet acc = Array.from(range1.byRange(range2, { step: 2 }));\n\nacc.map(m => m.format('DD')) // ['01', '03', '05']\n\nacc = Array.from(range1.byRange(range2, { excludeEnd, true, step: 2 }));\n\nacc.map(m => m.format('DD')) // ['01', '03']\n```\n\n**DEPRECATED** in `4.0.0`: The `exclusive` options is used to indicate if the\nend of the range should be excluded when testing for inclusion:\n\n**Note**: You can obtain the same functionality by setting `{ excludeEnd: true }`\n\n\n#### reverseBy\n\nIterate over a range in reverse:\n\n``` js\nconst range = moment.range('2012-01-01', '2015-01-01');\nconst acc = Array.from(range.reverseBy('years'));\nacc.map(m => m.format('YYYY')) // ['2015', '2014', '2013', '2012']\n```\n\nExclude the start time slice:\n\n``` js\nconst range = moment.range('2012-01-01', '2015-01-01');\nconst acc = Array.from(range.reverseBy('years', { excludeStart: true }));\nacc.map(m => m.format('YYYY')) // ['2015', '2014', '2013']\n```\n\nBy step:\n\n``` js\nconst start  = new Date(2012, 2, 2);\nconst end    = new Date(2012, 2, 6);\nconst range1 = moment.range(start, end);\n\nlet acc = Array.from(range1.reverseBy('day', { step: 2 }));\n\nacc.map(m => m.format('DD')) // ['06', '04', '02']\n\nacc = Array.from(range1.reverseBy('day', { excludeStart: true, step: 2 }));\n\nacc.map(m => m.format('DD')) // ['06', '04']\n```\n\n**DEPRECATED** in `4.0.0`: The `exclusive` options is used to indicate if the\nstart of the range should be excluded when testing for inclusion:\n\n**Note**: You can obtain the same functionality by setting `{ excludeStart: true }`\n\n\n#### reverseByRange\n\n``` js\nconst start = new Date(2012, 2, 1);\nconst two   = new Date(2012, 2, 2);\nconst end   = new Date(2012, 2, 5);\nconst range1 = moment.range(start, end);\nconst range2 = moment.range(start, two); // One day\n```\n\nIterate by another range in reverse:\n\n``` js\nconst acc = Array.from(range1.reverseByRange(range2));\n\nacc.length == 5 // true\nacc.map(m => m.format('DD')) // ['05', '04', '03', '02', '01']\n```\n\nExclude the start value:\n\n``` js\nconst acc = Array.from(range1.reverseByRange(range2, { excludeStart: true }));\n\nacc.length == 4 // true\nacc.map(m => m.format('DD')) // ['05', '04', '03', '02']\n```\n\nBy step:\n\n``` js\nlet acc = Array.from(range1.reverseByRange(range2, { step: 2 }));\n\nacc.map(m => m.format('DD')) // ['05', '03', '01']\n\nacc = Array.from(range1.reverseByRange(range2, { excludeStart: true, step: 2 }));\n\nacc.map(m => m.format('DD')) // ['05', '03']\n```\n\n**DEPRECATED** in `4.0.0`: The `exclusive` options is used to indicate if the\nstart of the range should be excluded when testing for inclusion:\n\n**Note**: You can obtain the same functionality by setting `{ excludeStart: true }`\n\n\n### Compare\n\nCompare range lengths or add them together with simple math:\n\n``` js\nconst range1 = moment.range(new Date(2011, 2, 5), new Date(2011, 3, 15));\nconst range2 = moment.range(new Date(1995, 0, 1), new Date(1995, 12, 25));\n\nrange2 > range1 // true\n\nrange1 + range2 // duration of both ranges in milliseconds\n\nMath.abs(range1 - range2); // difference of ranges in milliseconds\n```\n\n#### Equality\n\nCheck if two ranges are the same, i.e. their starts and ends are the same:\n\n``` js\nconst range1 = moment.range(new Date(2011, 2, 5), new Date(2011, 3, 15));\nconst range2 = moment.range(new Date(2011, 2, 5), new Date(2011, 3, 15));\nconst range3 = moment.range(new Date(2011, 3, 5), new Date(2011, 6, 15));\n\nrange1.isSame(range2); // true\nrange2.isSame(range3); // false\n\nrange1.isEqual(range2); // true\nrange2.isEqual(range3); // false\n```\n\n#### Difference\n\nThe difference of the entire range given various units.\n\nAny of the units accepted by [moment.js' `add` method][add] may be used.\n\n``` js\nconst start = new Date(2011, 2, 5);\nconst end   = new Date(2011, 5, 5);\nconst range = moment.range(start, end);\n\nrange.diff('months'); // 3\nrange.diff('days');   // 92\nrange.diff();         // 7945200000\n```\n\nOptionally you may specify if the difference should be rounded, by default it\nmimics moment-js' behaviour and rounds the values:\n\n``` js\nconst d1 = new Date(Date.UTC(2011, 4, 1));\nconst d2 = new Date(Date.UTC(2011, 4, 5, 12));\nconst range = moment.range(d1, d2);\n\nrange.diff('days')        // 4\nrange.diff('days', false) // 4\nrange.diff('days', true)  // 4.5\n```\n\n`#duration` is an alias for `#diff` and they may be used interchangeably.\n\n### Conversion\n\n#### `toDate`\n\nConverts the `DateRange` to an `Array` of the start and end `Date` objects.\n\n``` js\nconst start = new Date(2011, 2, 5);\nconst end   = new Date(2011, 5, 5);\nconst range = moment.range(start, end);\n\nrange.toDate(); // [new Date(2011, 2, 5), new Date(2011, 5, 5)]\n```\n\n#### `toString`\n\nConverting a `DateRange` to a `String` will format it as an [ISO 8601 time\ninterval][interval]:\n\n``` js\nconst start = '2015-01-17T09:50:04+00:00';\nconst end   = '2015-04-17T08:29:55+00:00';\nconst range = moment.range(moment.utc(start), moment.utc(end));\n\nrange.toString() // '2015-01-17T09:50:04+00:00/2015-04-17T08:29:55+00:00'\n```\n\n#### `valueOf`\n\nThe difference between the end date and start date in milliseconds.\n\n``` js\nconst start = new Date(2011, 2, 5);\nconst end   = new Date(2011, 5, 5);\nconst range = moment.range(start, end);\n\nrange.valueOf(); // 7945200000\n```\n\n## Running Tests\n\nClone this bad boy:\n\n``` sh\ngit clone https://git@github.com/rotaready/moment-range.git\n```\n\nInstall the dependencies:\n\n``` sh\nyarn install\n```\n\nDo all the things!\n\n``` sh\nyarn run check\nyarn run test\nyarn run lint\n```\n\n## Contributors\n\n- [**Adam Biggs**](https://github.com/adambiggs) (http://lightmaker.com)\n- [**Mats Julian Olsen**](https://github.com/mewwts)\n- [**Matt Patterson**](https://github.com/fidothe) (http://reprocessed.org/)\n- [**Wilgert Velinga**](https://github.com/wilgert) (http://neocles.io)\n- [**Tomasz Bak**](https://github.com/tb) (http://twitter.com/tomaszbak)\n- [**Stuart Kelly**](https://github.com/stuartleigh)\n- [**Jeremy Forsythe**](https://github.com/jdforsythe)\n- [**Александр Гренишин**](https://github.com/nd0ut)\n- [**@scotthovestadt**](https://github.com/scotthovestadt)\n- [**Thomas van Lankveld**](https://github.com/thomasvanlankveld)\n- [**nebel**](https://github.com/pronebel)\n- [**Kevin Ross**](https://github.com/rosskevin) (http://www.alienfast.com)\n- [**Thomas Walpole**](https://github.com/twalpole)\n- [**Jonathan Kim**](https://github.com/jkimbo) (http://jkimbo.co.uk)\n- [**Tymon Tobolski**](https://github.com/teamon) (http://teamon.eu)\n- [**Aristide Niyungeko**](https://github.com/aristiden7o)\n- [**Bradley Ayers**](https://github.com/bradleyayers)\n- [**Ross Hadden**](https://github.com/rosshadden) (http://rosshadden.github.com/resume)\n- [**Victoria French**](https://github.com/victoriafrench)\n- [**Jochen Diekenbrock**](https://github.com/JochenDiekenbrock)\n\n\n## License\n\nmoment-range is [UNLICENSED][unlicense].\n\n[add]: http://momentjs.com/docs/#/manipulating/add/\n[babel runtime transform plugin]: https://babeljs.io/docs/plugins/transform-runtime\n[babel polyfill]: https://babeljs.io/docs/usage/polyfill\n[broad support]: http://kangax.github.io/compat-table/es6/#test-well-known_symbols_Symbol.iterator,_existence_a_href=_https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator_title=_MDN_documentation_img_src=_../mdn.png_alt=_MDN_(Mozilla_Development_Network)_logo_width=_15_height=_13_/_/a_nbsp;\n[cdnjs]: https://github.com/cdnjs/cdnjs\n[cdnjs-moment-range]: https://cdnjs.com/libraries/moment-range\n[interval]: http://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n[iterable]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#Syntaxes_expecting_iterables\n[iteration protocols]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n[moment]: http://momentjs.com/\n[node]: http://nodejs.org/\n[unlicense]: http://unlicense.org/\n[parseZone]: https://momentjs.com/docs/#/parsing/parse-zone/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://git@github.com/rotaready/moment-range.git"
  },
  "scripts": {
    "build": "webpack -p",
    "check": "yarn run check:flow && yarn run check:typescript",
    "check:flow": "flow",
    "check:typescript": "tsc --project ./typing-tests/typescript",
    "doctoc": "doctoc README.md --github",
    "lint": "eslint ./lib/",
    "prepublishOnly": "yarn run build && cp ./lib/*.flow ./lib/*.d.ts ./dist",
    "preversion": "yarn run check && yarn run lint && yarn run test",
    "test": "karma start ./karma.conf.js",
    "version": "yarn run build && cp ./lib/*.flow ./lib/*.d.ts ./dist"
  },
  "typings": "./dist/moment-range.d.ts",
  "version": "4.0.1"
}

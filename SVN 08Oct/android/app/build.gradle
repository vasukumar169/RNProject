apply plugin: 'com.android.application'
apply plugin: 'newrelic'

import com.android.build.OutputFile

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 26
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId "com.hmepulse"
        minSdkVersion 16
        targetSdkVersion 20
        versionCode 3
        versionName "1.3"
				multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
		signingConfigs {
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
						signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    subprojects {
        afterEvaluate {project ->
                if (project.hasProperty("android")) {
                    android {
                        compileSdkVersion 25
                        buildToolsVersion '25.0.0'
                        lintOptions {
														checkReleaseBuilds false
                            showAll false
														ignoreWarnings true
														quiet true
                        }
                    }
                }
        }
    }
}

dependencies {
    compile project(':react-native-device-info')
    compile project(':react-native-vector-icons')
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.2.0"
    compile "com.facebook.react:react-native:+"
    compile 'com.microsoft.azure:notification-hubs-android-sdk:0.4@aar'
    compile 'com.microsoft.azure:azure-notifications-handler:1.0.1@aar'
		compile 'com.newrelic.agent.android:android-agent:5.16.0'
    compile project(':react-native-push-notification')
    compile ('com.google.android.gms:play-services-base:+')
    {
      force = true;
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

repositories {
		mavenCentral()
		maven {
        url "http://dl.bintray.com/microsoftazuremobile/SDK"
    }
}
